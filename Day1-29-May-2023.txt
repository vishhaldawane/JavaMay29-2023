
NLP

	Neuro Linguistic Programming
	|	|		 |
	brain	spoken/listening code
	cells


		V	A	K	O	G
		|	|	|	|	|
		eye	ear	skin			
		|	|
		code	concepts








			ROLE - acting
			who ???? DBA Analyst Programmer
			|		business guys/gals
			|	testers/deployers/support
			|
		-----------------------
		|		|
		where		when
		|SPACE		|TIME
	--------------------------------------
	|		|		|
	why		what		how
	REASON		in->FORMation	implementation
						|
					---------------------
					|		|
					success	<==== feedback

	changeless -> changes



		Java Programming Language
		|	|		|
	   flavour	set of		---------------------------
	C		instructions	|	|	|	|
	C++				listen	speak	read	write
	Python				<------------>


		formula of creation

	health  wealth   relations   mentalpeace  technical  social





	Java is "highly structured"  language


	notepad First.java <-- source code is First.java
	|	 |
	public class First <-- class name is also first
	{
			
	}

	"source code name" and "class name" must be the same
	only if "the class name" is public

	if the class is not public then it is not mandatory

	you can have one public class in the source code


	C:\> notepad First.java
			|
			class First
			{
			}
	C:\> javac First.java
		      |
		    First.class <-- this .class file is generated
		       |	because of "class First"
		       |
	C:\> java  First <-- pass this class file without extension


Naming Convention
----------------------

	ClassName	Singer,Player,BankAccount
			SavingsAccount, FixedDepositAccount
			GodIsNowHere

	methodName	withdraw() { }
			fundTransfer() { }	
			setLookAndFeel() { }
			openDematAccount() { }
			stopTheChequePayement() { }
			applyForCreditCard() { }

	objectNames	myObject1
	variableNames	rollNumber
	fieldNames	bankBranchAddress

	CONSTANT	PI=3.14
			SPEED_OF_LIGHT=186000.519  per second
			MIN_RATE_OF_INTEREST=3.4
			MAX_RATE_OF_INTEREST=13.5

	packages	package1.package2
			com.sbi.collections
			com.sbi.accounts
			com.sbi.transfer

		com <-- folder
		|
	--------------------
	|
	sbi <-- folder
	|
----------------------------------------
|		|		|
collections	accounts	transfer <-- folders



		mysongs
		|
	---------------------------------
	|		|	|
	classical	rock	pop
	....		...	....

 


	Data <--- Types
		---------------
			|
	------------------------------------
	|				|
	Primitive		    Secondary
	|				   |	
---------------------------------------	   ----------------
|	  |		|	|			|
Integral Floating   Character Boolean			Object
 |	 |		|	 |			|
 byte  1 float  4     char 2	boolean 1	-------------------
 short 2 double 8				|
 int   4					String
 long  8
	
	
		dial of byte
	-128		0		127
	<--------------256------------------>

	int roll = 100;
	roll++;
	roll.value();


	Integer myroll = new Integer(100);
	myroll.increment();
	myroll.decrement();
	myroll.convert();
	myroll.value();



	100%

  primitive   Wrapper
	|	|
	byte	Byte
	short	Short
	int	Integer
	long	Long
	char	Character
	float	Float
	double	Double
	boolean	Boolean

POPS concepts			vs	OOPS concept
-------------------			----------------------
Procedure Oriented 			Object Oriented 
Programming System			Programming System

top to bottom				bottom to top

POPS=procedure<--data			OOPS=data<---procedure


			Machine

	Left					right
	-Cloth	|	|	|	|	|Shirt - S M L XL XXL

		  size| qty
		   L    50 - data	

		 marking() { }
		 cutting() { } - verb | activity | function | methods
		 stitching() { }
		 finishing() { }
		 packing() { }

roller


		Object = physical state + behaviour
	
		Object = data + methods

		Account = balance + withdraw(){} deposit() { }




	Class					Object
	|					|
design of the object			instance of a class

blue print of a house			actual house(s)

text file				memory representation

.java file				byte code/jvm code

class Account				Account acc1= new Account();
{					Account acc2= new Account();
    data				Account acc3= new Account();
    +
    METHODS
}

classname			CONSTRUCTOR
 |				|
Account accountObj1 = new Account();
Account accountObj2 = new Account();
Account accountObj3 = new Account();
		|	|
	reference to  ALLOCATOR
	object

	STACK				HEAP (free store) 
	|
					FIELD AREA				
			accountNumber	accountHolder	accountBalance
			-------------------------------------------------
			|		|		|		|
			-------------------------------------------------
    +------------------->100
    |
+---|-+				METHOD AREA
| 100 |				setAccount()
+-----+				printAccount()
accountObj1


			accountNumber	accountHolder	accountBalance
			-------------------------------------------------
			|		|		|		|
			-------------------------------------------------
    +------------------->200
    |
+---|-+				
| 200 |				
+-----+				
accountObj2



			accountNumber	accountHolder	accountBalance
			-------------------------------------------------
			|		|		|		|
			-------------------------------------------------
    +------------------->300
    |
+---|-+				
| 300 |				
+-----+				
accountObj3


				   0        1        2     3        4        5      6      7         8       9	
				-----------------------------------------------------------------------------------
	+-----------------------| 500	|  800	|	|	|	|	|	|	|         |       |
	|			-----|------------------------------------------------------------------------------
	|			100  |
	|			     |
	100	+--------------------+	
	accSet	|
		|
		|	accountNumber	accountHolder	accountBalance
		|	-------------------------------------------------
		|	|		|		|		|
		|	-------------------------------------------------
		+------>500



			accountNumber	accountHolder	accountBalance
		|	-------------------------------------------------
		|	|		|		|		|
		|	-------------------------------------------------
		+------>800
Account accSet[] = new Account[10];

accSet[0] = new Account();
accSet[1] = new Account();
accSet[2] = new Account();
accSet[3] = new Account();


---------------------------------------------------------
OOPS concepts


	1. Abstraction
		it is the "What is it?" part of an object
		HIDE THE DATA, PROCEDURE
		HIDE THE DATA IN SUCH A WAY SO THAT END USER
		CANNOT ACCESS IT
		
	2. Encapsulation
		it is the "How is it?" part of an object
		BINDING OF DATA WITH CONCERNED FUNCTIONS
		IN SUCH WAY SO THAT THE "ACCESSIBLE FUNCTIONS"
		ARE "AVAILABLE" TO THE "END USER"

	3. Polymorphism

	4. Inheritance

	5. Object Communication

			C - POPS
			|
			C++ - OOPs
			|  .cpp -> .obj -> .exe

Vendor	Intel		Sun/Oracle	HP	   IBM		Apple			any
	|		|		|	   |		|			|
H/w	X86		SpARC		hpseries   BB		PowerPc			any
	|		|		|	   |		|			|
OS	Windows		Solaris		HPUX	  AI[CS]X	Macintosh		Linux
	|		|		|	   |		|			|
compi	TC/VC++		cc		cc	   cc		cc			gcc/g++
	|ASCII		|		|	   |		|			|
Src	calc.cpp ----->calc.cpp	------>calc.cpp--->calc.cpp---->calc.cpp ------------>calc.cpp		
compile	|		|		|		|	|			|
Obj	calc.obj ----->calc.o	----->calc.o	----->calc.o----->calc.o	----->calc.o			
link	|		|		|		|		|		|
Exe	calc.exe ----->calc.out	----->calc.out----->calc.out	----->calc.out----->calc.out
			|
			calc

			ls

			ls.c
			|
			ls.o
			|
			ls.out
			|
			/bin/ls

	.net f/w

	JPL
	|
	One Language		Multi Language
	|			|
	MultiPlatform		One Platform - CLR
	JVM JVM JVM JVM		x86
	x8  sp   bb  pp	
				


Day 1 : Introduction to Java, Simple Java Code,
	naming Conventions, Data types, Classes and Objects
	Arrays of Objects, Four types of functions
	OOPS vs POPS
	OOPS concepts, 5
	
Day 2  : OOPs Concepts, Association - isA hasA usesA producesA 
	 Passing Object and Returning Object from a function
	 static, final, abstract, interfaces 

Day 3  : Packages, Exception handling, Multithraeding

Day 4  : Generics, Collection F/w, File Handling

Day 5  : JDBC, Annotations, Case Study implementation







	JVM - 
	JRE - java runtime environment [ required to run the .class]


Day 2
----------------------------------------------------
	Java Programming Language - James Gosling + 3
	"Head First" Java - K & B - pictorial representation

	3. Polymorphism
	   ability of a "business entity" to have many forms

		a. class extension
		b. function overloading - eager    loading / early binding
		c. function overriding - lazy      loading / late binding
		d. operator overloading


		a. class extension


			BankAccount
			|
	---------------------------------------
	|		|		|
   SavingsAccount CurrentAccount   CreditCardAccount
	|
FixedDepositAccount

					...
					..
					|
				LivingBeing
				|breathing();
			------------------------------	
			|		|	|
			Animal		Tree 	Stone
			|move();
		-------------------------------------------------
			|		|		|	|
			Mammal		Reptile		Fish	Bird
			| giveBirth()	 layEggs()	swim()	fly()
			|
			Human
			|feel();
			|think();			
			|
			Person
			|analize()
		-----------------------------------------
			|
			Student
			|lEarn()		
			|study()
	------------------------------------------------------------------------------------------------------------------
			|			|		|		|		|		|
			Doctor			Engineer	VideoEditor	ContentWriter	YouTuber	....
			|diagnose()		|
		-------------		---------------------------
		|		
		Surgeon
		|surgery();
	-----------------------------------
	|		|		|
HeartSurgeon		NeuroSurgeon	OrthoSurgeon
  heartSurgey()		   brainSurgery()	boneSurgery()





		b. function overloading

		function can be redefined with the same
		name, but this can be differentiated
		based on
			i. type of parameter
			ii. number of parameter
			iii. sequence of type of parameters

			CoVariant type can be included using
			return type

		c. function overriding

			let subclass redefine a function
			of its nearest super class

		class SavingsAccount // Amit
		{
			float balance;
			void withdraw(float amt) {
				if(amt < (balance-5000) )
					balance = balance -amt;
				else
					Sop("cannot withdraw");
			}
		}
				CHILD			PARENT
		class FixedDepositAccount extends SavingsAccount // Sumit
		{
			Date maturityDate;
			
			void withdraw(float a) { // OVERRIDING / REDEFINED / filter / rewriting / 
				if(a <= (balance) && maturityDate == todaysDate )
					balance = balance -a;
				else
					Sop("cannot withdraw, account yet not matured");
			}
		}



		d. operator overloading

			ability of an operator	
			to have multiple meanings
			in the expression

--------------------------------------------------------------


	4. Inheritance

		ability of a "business entity" to 
		acquire properties
		from "existing business entities"

	Derivation			Implementation
		|			|
		A <-regular class	A <--abstract class/interfaces
		|			|
		B			B

		a. single level
		b. multi level
		c. multiple level* interfaces
		d. hierarchical level

		
	Constructor 
	---------------

	- a special code block
	- which has the same name as of "the enclosing class"
		class A
		{
		}

	- it is invoked during object creation process
	- it is called once per object

	- to initialize the object data

	-----------------------------------------------------


	1. exclusive
	2. inherited
	3. inherited-cum-overriding
	4. implemented (abstract class/interfaces)	

			Association
			     |
		--------------------------------
		|				|
		structural		operational
		    |			    |
		-----------------       -----------
		|	|		|	|
		isA	hasA		usesA	producesA

	class Person
	{
		AdhaarCard adaarCard = new AdhaarCard(); //hasA

	}
	class Student extends Person //isA
	{
		ReportCard report = new ReportCard(); //hasA
		
	}
	class Employee extends Student //isA
	{
		SalarySlip jan = new SalarySlip(); //hasA

	}




			BankAccount <-- generalization
			    | acno,name,balance
			    | withdraw() { } deposit() { }
	---------------------------------------------
	|isA		    |isA		|isA
	SavingsAccount	CurrentAccount	     CreditCardAccount <- specialization 
	|interestRate	    |overdraftLimit     |creditLimit,cashLimit
	|
------------------------
|isA
FixedDepositAccount <- specialization of specialization 
| maturityDate
-------------------
		|
	FlexiFixedDepositAccount 
		|


===========================================================================

BankAccount ba = new BankAccount(101, "Sachin", 5000000);
			accountNumber	accountHolder	accountBalance
			-------------------------------------------------
			|	101	|	Sachin	|	 5000000|
			-------------------------------------------------
    +------------------->100
    |
+---|-+				
| 100 |				
+-----+				

SavingsAccount savings = new SavingsAccount(102, "Dhoni", 6000000, 4.5);

			accountNumber	accountHolder	accountBalance	  interestRate
			--------------------------------------------------------------
			|	102	|	"Dhoni", |	 6000000|	4.5   |
			----------------------------------------------------------------
    +------------------->200
    |
+---|-+				
| 200 |				
+-----+				

FixeDepositAccount  fd = new FixeDepositAccount(103, "Virat", 7000000, 8.5, LocalDate.of(2025, 12, 31));

			<-------------------------------FixedDeposit----------------------------------->
			<-----------------------SavingsAccount------------------------>
			<-----------------BankAccount---------------->
			accountNumber	accountHolder	accountBalance	  interestRate   maturityDate
			--------------------------------------------------------------------------------
			|	103	|	Virat	|	 7000000|	8.5   |  2025|12|31    |
			---------------------------------------------------------------------------------
    +------------------->300
    |
+---|-+				
| 300 |				
+-----+				
fd

			

	5. Object Communication



	class TurningGlass {
	}
	class HeatingCoil {
	}
	class Ovan
	{
		HeatingCoil coil = new HeatingCoil(); //hasA
		TurningGlass turner = new TurningGlass(); //hasA

	}

	class Filament
	{
	}
	class Bulb {
		Filament fila = new Filament();//hasA

	}

	class WashingMachine {
		WashingTub tub = new WashingTub(); //hasA

	}



	Lyricist lyricist1 = new Lyricist("Gulzar", "Jay Ho");
	Lyricist x = lyricist1; 
	Lyricist y = x; 

					lyricist	name
					-------------------------
					|Gulzar		|Jay Ho  |
					-------------------------
	+---------------------------->  100 <-------- 100 y
	|				|
	100				|
	lyricist1			100
					x



















