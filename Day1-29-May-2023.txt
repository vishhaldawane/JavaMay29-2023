
NLP

	Neuro Linguistic Programming
	|	|		 |
	brain	spoken/listening code
	cells


		V	A	K	O	G
		|	|	|	|	|
		eye	ear	skin			
		|	|
		code	concepts








			ROLE - acting
			who ???? DBA Analyst Programmer
			|		business guys/gals
			|	testers/deployers/support
			|
		-----------------------
		|		|
		where		when
		|SPACE		|TIME
	--------------------------------------
	|		|		|
	why		what		how
	REASON		in->FORMation	implementation
						|
					---------------------
					|		|
					success	<==== feedback

	changeless -> changes



		Java Programming Language
		|	|		|
	   flavour	set of		---------------------------
	C		instructions	|	|	|	|
	C++				listen	speak	read	write
	Python				<------------>


		formula of creation

	health  wealth   relations   mentalpeace  technical  social





	Java is "highly structured"  language


	notepad First.java <-- source code is First.java
	|	 |
	public class First <-- class name is also first
	{
			
	}

	"source code name" and "class name" must be the same
	only if "the class name" is public

	if the class is not public then it is not mandatory

	you can have one public class in the source code


	C:\> notepad First.java
			|
			class First
			{
			}
	C:\> javac First.java
		      |
		    First.class <-- this .class file is generated
		       |	because of "class First"
		       |
	C:\> java  First <-- pass this class file without extension


Naming Convention
----------------------

	ClassName	Singer,Player,BankAccount
			SavingsAccount, FixedDepositAccount
			GodIsNowHere

	methodName	withdraw() { }
			fundTransfer() { }	
			setLookAndFeel() { }
			openDematAccount() { }
			stopTheChequePayement() { }
			applyForCreditCard() { }

	objectNames	myObject1
	variableNames	rollNumber
	fieldNames	bankBranchAddress

	CONSTANT	PI=3.14
			SPEED_OF_LIGHT=186000.519  per second
			MIN_RATE_OF_INTEREST=3.4
			MAX_RATE_OF_INTEREST=13.5

	packages	package1.package2
			com.sbi.collections
			com.sbi.accounts
			com.sbi.transfer

		com <-- folder
		|
	--------------------
	|
	sbi <-- folder
	|
----------------------------------------
|		|		|
collections	accounts	transfer <-- folders



		mysongs
		|
	---------------------------------
	|		|	|
	classical	rock	pop
	....		...	....

 


	Data <--- Types
		---------------
			|
	------------------------------------
	|				|
	Primitive		    Secondary
	|				   |	
---------------------------------------	   ----------------
|	  |		|	|			|
Integral Floating   Character Boolean			Object
 |	 |		|	 |			|
 byte  1 float  4     char 2	boolean 1	-------------------
 short 2 double 8				|
 int   4					String
 long  8
	
	
		dial of byte
	-128		0		127
	<--------------256------------------>

	int roll = 100;
	roll++;
	roll.value();


	Integer myroll = new Integer(100);
	myroll.increment();
	myroll.decrement();
	myroll.convert();
	myroll.value();



	100%

  primitive   Wrapper
	|	|
	byte	Byte
	short	Short
	int	Integer
	long	Long
	char	Character
	float	Float
	double	Double
	boolean	Boolean

POPS concepts			vs	OOPS concept
-------------------			----------------------
Procedure Oriented 			Object Oriented 
Programming System			Programming System

top to bottom				bottom to top

POPS=procedure<--data			OOPS=data<---procedure


			Machine

	Left					right
	-Cloth	|	|	|	|	|Shirt - S M L XL XXL

		  size| qty
		   L    50 - data	

		 marking() { }
		 cutting() { } - verb | activity | function | methods
		 stitching() { }
		 finishing() { }
		 packing() { }

roller


		Object = physical state + behaviour
	
		Object = data + methods

		Account = balance + withdraw(){} deposit() { }




	Class					Object
	|					|
design of the object			instance of a class

blue print of a house			actual house(s)

text file				memory representation

.java file				byte code/jvm code

class Account				Account acc1= new Account();
{					Account acc2= new Account();
    data				Account acc3= new Account();
    +
    METHODS
}

classname			CONSTRUCTOR
 |				|
Account accountObj1 = new Account();
Account accountObj2 = new Account();
Account accountObj3 = new Account();
		|	|
	reference to  ALLOCATOR
	object

	STACK				HEAP (free store) 
	|
					FIELD AREA				
			accountNumber	accountHolder	accountBalance
			-------------------------------------------------
			|		|		|		|
			-------------------------------------------------
    +------------------->100
    |
+---|-+				METHOD AREA
| 100 |				setAccount()
+-----+				printAccount()
accountObj1


			accountNumber	accountHolder	accountBalance
			-------------------------------------------------
			|		|		|		|
			-------------------------------------------------
    +------------------->200
    |
+---|-+				
| 200 |				
+-----+				
accountObj2



			accountNumber	accountHolder	accountBalance
			-------------------------------------------------
			|		|		|		|
			-------------------------------------------------
    +------------------->300
    |
+---|-+				
| 300 |				
+-----+				
accountObj3


				   0        1        2     3        4        5      6      7         8       9	
				-----------------------------------------------------------------------------------
	+-----------------------| 500	|  800	|	|	|	|	|	|	|         |       |
	|			-----|------------------------------------------------------------------------------
	|			100  |
	|			     |
	100	+--------------------+	
	accSet	|
		|
		|	accountNumber	accountHolder	accountBalance
		|	-------------------------------------------------
		|	|		|		|		|
		|	-------------------------------------------------
		+------>500



			accountNumber	accountHolder	accountBalance
		|	-------------------------------------------------
		|	|		|		|		|
		|	-------------------------------------------------
		+------>800
Account accSet[] = new Account[10];

accSet[0] = new Account();
accSet[1] = new Account();
accSet[2] = new Account();
accSet[3] = new Account();


---------------------------------------------------------
OOPS concepts


	1. Abstraction
		it is the "What is it?" part of an object
		HIDE THE DATA, PROCEDURE
		HIDE THE DATA IN SUCH A WAY SO THAT END USER
		CANNOT ACCESS IT
		
	2. Encapsulation
		it is the "How is it?" part of an object
		BINDING OF DATA WITH CONCERNED FUNCTIONS
		IN SUCH WAY SO THAT THE "ACCESSIBLE FUNCTIONS"
		ARE "AVAILABLE" TO THE "END USER"

	3. Polymorphism

	4. Inheritance

	5. Object Communication

			C - POPS
			|
			C++ - OOPs
			|  .cpp -> .obj -> .exe

Vendor	Intel		Sun/Oracle	HP	   IBM		Apple			any
	|		|		|	   |		|			|
H/w	X86		SpARC		hpseries   BB		PowerPc			any
	|		|		|	   |		|			|
OS	Windows		Solaris		HPUX	  AI[CS]X	Macintosh		Linux
	|		|		|	   |		|			|
compi	TC/VC++		cc		cc	   cc		cc			gcc/g++
	|ASCII		|		|	   |		|			|
Src	calc.cpp ----->calc.cpp	------>calc.cpp--->calc.cpp---->calc.cpp ------------>calc.cpp		
compile	|		|		|		|	|			|
Obj	calc.obj ----->calc.o	----->calc.o	----->calc.o----->calc.o	----->calc.o			
link	|		|		|		|		|		|
Exe	calc.exe ----->calc.out	----->calc.out----->calc.out	----->calc.out----->calc.out
			|
			calc

			ls

			ls.c
			|
			ls.o
			|
			ls.out
			|
			/bin/ls

	.net f/w

	JPL
	|
	One Language		Multi Language
	|			|
	MultiPlatform		One Platform - CLR
	JVM JVM JVM JVM		x86
	x8  sp   bb  pp	
				


Day 1 : Introduction to Java, Simple Java Code,
	naming Conventions, Data types, Classes and Objects
	Arrays of Objects, Four types of functions
	OOPS vs POPS
	OOPS concepts, 5
	
Day 2  : OOPs Concepts, Association - isA hasA usesA producesA 
	 Passing Object and Returning Object from a function
	 static, final, abstract, interfaces 

Day 3  : Packages, Exception handling, Multithraeding

Day 4  : Generics, Collection F/w, File Handling

Day 5  : JDBC, Annotations, Case Study implementation







	JVM - 
	JRE - java runtime environment [ required to run the .class]


Day 2
----------------------------------------------------
	Java Programming Language - James Gosling + 3
	"Head First" Java - K & B - pictorial representation

	3. Polymorphism
	   ability of a "business entity" to have many forms

		a. class extension
		b. function overloading - eager    loading / early binding
		c. function overriding - lazy      loading / late binding
		d. operator overloading


		a. class extension


			BankAccount
			|
	---------------------------------------
	|		|		|
   SavingsAccount CurrentAccount   CreditCardAccount
	|
FixedDepositAccount

					...
					..
					|
				LivingBeing
				|breathing();
			------------------------------	
			|		|	|
			Animal		Tree 	Stone
			|move();
		-------------------------------------------------
			|		|		|	|
			Mammal		Reptile		Fish	Bird
			| giveBirth()	 layEggs()	swim()	fly()
			|
			Human
			|feel();
			|think();			
			|
			Person
			|analize()
		-----------------------------------------
			|
			Student
			|lEarn()		
			|study()
	------------------------------------------------------------------------------------------------------------------
			|			|		|		|		|		|
			Doctor			Engineer	VideoEditor	ContentWriter	YouTuber	....
			|diagnose()		|
		-------------		---------------------------
		|		
		Surgeon
		|surgery();
	-----------------------------------
	|		|		|
HeartSurgeon		NeuroSurgeon	OrthoSurgeon
  heartSurgey()		   brainSurgery()	boneSurgery()





		b. function overloading

		function can be redefined with the same
		name, but this can be differentiated
		based on
			i. type of parameter
			ii. number of parameter
			iii. sequence of type of parameters

			CoVariant type can be included using
			return type

		c. function overriding

			let subclass redefine a function
			of its nearest super class

		class SavingsAccount // Amit
		{
			float balance;
			void withdraw(float amt) {
				if(amt < (balance-5000) )
					balance = balance -amt;
				else
					Sop("cannot withdraw");
			}
		}
				CHILD			PARENT
		class FixedDepositAccount extends SavingsAccount // Sumit
		{
			Date maturityDate;
			
			void withdraw(float a) { // OVERRIDING / REDEFINED / filter / rewriting / 
				if(a <= (balance) && maturityDate == todaysDate )
					balance = balance -a;
				else
					Sop("cannot withdraw, account yet not matured");
			}
		}



		d. operator overloading

			ability of an operator	
			to have multiple meanings
			in the expression

--------------------------------------------------------------


	4. Inheritance

		ability of a "business entity" to 
		acquire properties
		from "existing business entities"

	Derivation			Implementation
		|			|
		A fun(){}<-regularClass	A fun(); <--abstract class/interfaces
		|			|
		B			B fun() { }

		a. single level
		b. multi level
		c. multiple level* interfaces
		d. hierarchical level

		
	Constructor 
	---------------

	- a special code block
	- which has the same name as of "the enclosing class"
		class A
		{
		}

	- it is invoked during object creation process
	- it is called once per object

	- to initialize the object data

	-----------------------------------------------------


	1. exclusive
	2. inherited
	3. inherited-cum-overriding
	4. implemented (abstract class/interfaces)	

			Association
			     |
		--------------------------------
		|				|
		structural		operational
		    |			    |
		-----------------       -----------
		|	|		|	|
		isA	hasA		usesA	producesA

	class Person
	{
		AdhaarCard adaarCard = new AdhaarCard(); //hasA

	}
	class Student extends Person //isA
	{
		ReportCard report = new ReportCard(); //hasA
		
	}
	class Employee extends Student //isA
	{
		SalarySlip jan = new SalarySlip(); //hasA

	}




			BankAccount <-- generalization
			    | acno,name,balance
			    | withdraw() { } deposit() { }
	---------------------------------------------
	|isA		    |isA		|isA
	SavingsAccount	CurrentAccount	     CreditCardAccount <- specialization 
	|interestRate	    |overdraftLimit     |creditLimit,cashLimit
	|
------------------------
|isA
FixedDepositAccount <- specialization of specialization 
| maturityDate
-------------------
		|
	FlexiFixedDepositAccount 
		|


===========================================================================

BankAccount ba = new BankAccount(101, "Sachin", 5000000);
			accountNumber	accountHolder	accountBalance
			-------------------------------------------------
			|	101	|	Sachin	|	 5000000|
			-------------------------------------------------
    +------------------->100
    |
+---|-+				
| 100 |				
+-----+				

SavingsAccount savings = new SavingsAccount(102, "Dhoni", 6000000, 4.5);

			accountNumber	accountHolder	accountBalance	  interestRate
			--------------------------------------------------------------
			|	102	|	"Dhoni", |	 6000000|	4.5   |
			----------------------------------------------------------------
    +------------------->200
    |
+---|-+				
| 200 |				
+-----+				

FixeDepositAccount  fd = new FixeDepositAccount(103, "Virat", 7000000, 8.5, LocalDate.of(2025, 12, 31));

			<-------------------------------FixedDeposit----------------------------------->
			<-----------------------SavingsAccount------------------------>
			<-----------------BankAccount---------------->
			accountNumber	accountHolder	accountBalance	  interestRate   maturityDate
			--------------------------------------------------------------------------------
			|	103	|	Virat	|	 7000000|	8.5   |  2025|12|31    |
			---------------------------------------------------------------------------------
    +------------------->300
    |
+---|-+				
| 300 |				
+-----+				
fd

			

	5. Object Communication



	class TurningGlass {
	}
	class HeatingCoil {
	}
	class Ovan
	{
		HeatingCoil coil = new HeatingCoil(); //hasA
		TurningGlass turner = new TurningGlass(); //hasA

	}

	class Filament
	{
	}
	class Bulb {
		Filament fila = new Filament();//hasA

	}

	class WashingMachine {
		WashingTub tub = new WashingTub(); //hasA

	}



	Lyricist lyricist1 = new Lyricist("Gulzar", "Jay Ho");
	Lyricist x = lyricist1; 
	Lyricist y = x; 

					lyricist	name
					-------------------------
					|Gulzar		|Jay Ho  |
					-------------------------
	+---------------------------->  100 <-------- 100 y
	|				|
	100				|
	lyricist1			100
					x







	

-------------------------------------------------------------
		FIELD		METHOD		CLASS
-------------------------------------------------------------
static		shared across	are used to	nested class
		all the objects refer the 
		of a class	other static
				members
-------------------------------------------------------------	
final		CONSTANT	CANNOT BE	CANNOT BE 
				OVERRIDDEN	EXTENDED
-------------------------------------------------------------
abstract	X		partial contract    it may have
				of a class	    abstract methods
-------------------------------------------------------------


		static "data members"
			- they are declared "inside a class"
			- cannot be declared inside any method
			- class's data 
			- they are instance's data


	Object data		vs		Class's Data
						(static data)
	|					|
	color
	owner
	length

	static --> kiteCount = 0

	static -> printKiteCount


			color	owner	length	
	k1


			color	owner	length 
	k2

			color	owner	length 
	k3

			color	owner	length
	k3

	abstract class + abstract method = meant for inheritance


	abstract class 
	-------------------
		a class with [optional partial contract]
		it cannot be instantiated
		it can be reused by the children
		it acts as a symmetry across the group of classes
	

	abstract method
	---------------
		- method without body
		- always declared inside an abstract class

		abstract = partial = incomplete

		- partial contract of a class -

	abstract class GeometricalShape
	{
		//abstract method is without body
		abstract void draw(); <-- undefined
	}
	
	class Circle
	{
		void draw() {
		}	
	}
	class Square
	{
		void draw() {
		}	
	}

	class Rectangle
	{
		void draw() {
		}	
	}
	class Triangle
	{
		void draw() {
		}	
	}








	"static" method			"non-static"
	----------------			|
	|				can also access static+	
	can only access			non static data/methods
	other static data/methods


	right hand -> paper  - 6      - anti clock wise
	right leg  -> ground - circle - clock wise
	

			GeometricalShape
			      |
	----------------------------------------------
		|			|
		Circle - HR		Square - L
		|isA			|isA
		|			|
		Ellipse	HR+(VR)		Rectangle L + (B)










	interfaces

		- it is a pure abstract class
		- only abstract methods are declared here
		- no non-abstract methods here


		
			Animal
			| breathing();
		-------------------------
		|		|
		Bird		Mammal
		|fly();		|giveBirth();
		|layEggs()	|
	-------------		-------------------
	|	     |          |		|
	Parrot	     ------------		Tiger
			  |
			  Bat	

		linear
		non-linear



Exception Handling
-------------------

	exception = runtime error

			error
			|
	--------------------------------------------------
	|	 |	 |	  |	 |
	syntax  linker  runtime  fatal  logical
	|	 |	  |        |	   |
	compile library exception  crash   4+4=16



			Throwable
			 |
		-----------------------
		|		|
		Error		Exception
		|cant be	|can be
		|caught		|caught	
	------------		|	"checked" by the compiler
	|		-------------------------------------		
OutOfMemoryError	|	   |	|	|	
ThreadDeath		|	  ...	SQLException IOException	
VirtualMachineError	|
		RuntimeException
		| "unchecked" by the compiler
	-------------------------------------------
	|	    |     |			|
ArithmeticException |  NullPointerException    ....
    10/0	    |   String str;  str.charAt(5)
	 IndexOutOfBoundsException  
		|
 --------------------------------------------
 |				 |
ArrayIndexOutOfBoundsException   StringIndexOutOfBoundsException  
  int ary[]={10,20,30}			String str="Jack";
  ary[5]				str.charAt(10);




shrut pragya	chintan pragya    bhavana pragya
|		|			|
listen		manan		experiencing at the moment




Paramhansa Yogananda - God Talks To Arjuna
				Royal Science of God Realization

			Parmatma
			   |
			  Atma  - atma shakti
			   |
			Intellect - gyan shakti
			   |
	past <-----------Present-------------> future
	|		   |			|
	|		  mind - ichha shakti	|
   -----------				  ---------------
   |        |				   |		|
   good    bad				  good		bad

	
Custom exception = user defiend exceptions
----------------------------------------------


	class Car {

		void longDrive() {
			
		}

	}

unchecked
	class TyrePuncturedException extends RuntimeException {

	}
	class BrakeFailedException extends RuntimeException {
	
	}

checked
	class FuelException extends Exception {
	
	}
	class TyrePressureException extends Exception {

	}









------------------------------------------

Packages
--------

	packages = to organize relevant classes 
	packages = similar to directories/folders on the OS
	|			|
	JAVA			Operating system
				|
				to store / organize files/
				subfolders

	package names cannot have spaces
	packages always in small cases


			java
			|
	---------------------------------------------------
	|	|	|	|	|	|
	lang	awt	net	util    sql	io
    (default)	|	 |	 |	|	 |
	System	Button	Socket	List	Driver   File
	Thread  Menu		Set	ResultSet FileInputStream
	Exception Window	LinkedList	  FileOutputStream 	
RuntimeException  Frame		ArrayList
	String


	QUALIFIERS
	static, final, abstract

	ACCESS SPECIFIERS
		1.           <--- default/within the package/friendly
		2. private   <-- only within the class
		3. protected
		4. public    <-- available anywhere


			jungle <--main package
			|
	-----------------------------------------------------
	|		|		|		|
	cave		tree		river		house <-- subpackages
	|		|		|		|
	Tiger		Monkey		Turtle		FarmHouse
	Lion		Parrot		Fish		
	Bear

Tiger.java
---------------------------
package jungle.cave;
class Tiger
{
}
----------------------------


Lion.java
---------------------------
package jungle.cave;
class Lion
{
}
----------------------------
		
FarmHouse.java
-------------------
package jungle.house
import jungle.cave.Tiger;
import jungle.cave.Lion;

class FarmHouse
{
	main()
	{
		Tiger tiger = new Tiger();
	}
}

-----------------------------------------------

Multithreading
----------------

Accounts master
	---------------------------
	101 Suresh 70000 
	102 Dinesh 60000
	103 Ritesh 80000
	..
	105
	106
	119
	201

			Cash Deposit Counter
		Teller1		Teller2		Teller3
		|		|		|
		getBalance();	getBalance();	getBalance();
		|		|		|
		calcAmt();	calcAmt();	calcAmt();
		|		|		|
		setBalance();	setBalance();	setBalance();
		|		|		|
		Customer1	Customer2	Customer3
	a/c :	101		101		101
	time:	10.30am		10.30am		10.30am
	cash:	5000/-		7000/-		8000/-
	deno:	500Rs 		100Rs		2000Rs
	cnt :	10 notes	70 notes	4


	Whatever doesnt depend upon "business logic"
	must be automated

		Object
		  | 
	-------------------------------------------
		|			   |
		|	Runnable	  JFrame
		|	| run();	   |
		|	|		   |
		| -----------------------+ |
		| |isA		         | |
		| |			 | |
		Thread 			MyFrame
		|start() { } 
		|run(){ }
	------------------
	|isA
   MessageThread
	run() { ur logic }


I.
	1. write a class that extends java.lang.Thread class
	2. to override the run() {} method - which has ur logic
	3. instantiate this class - MessageThread
	4. invoke its start() method -> invokes ur run() { }

II.
	1. write a class that implements java.lang.Runnable
	2. mandate to implement the run() {} method - which has ur logic
	3. instantiate this class - MessageThread
	4. instantiate java.lang.Thread class - and to its contructor
			pass your Runnable object (MyFrame)
	5. invoke the java.lang.Thread class's start method-> 
		which invoke ur MyFrame's run()

	
	Thread
	|
	-------------------------------------
	|		|		|
	MIN_PRIORITY NORM_PRIORITY MAX_PRIORITY
	1		5		10








	Producer			Consumer
	|				|
	run()				run()
	|				|
	|	        Object		|
	|notify()	   |		|wait()
	+------->-------FoodItem ------->
			  |
			itemServed?
			  |
	   produces()	  |         consumes()
		|	  |		|
		---------------------------

	Object
	-------------

1		toString() - string representation
2		hashCode() - memory address

	--ITC
3		wait()
4		wait(.)
5		wait(..)
6		notify()		
7		notifyAll()

8		equals - comparing object

9		finalize() - garbage collection
10		getClass() - META DATA

11		clone() - object cloning

----------------------------------------------------------------------

Generics, Collection f/w

	Generics
	|
	template functions/classes


interface A
{
  void fun();
}
interface B extends A
{
  void foo();
}
class D{}
class C extends D implements B
{
}			
				A    X   Y
				|    |   |
				----------
				|
				| extends A,X,Y
		D		B
		|extends	|
		|----------------
		|	implements
		|
		C

			Iterable(i)
			  |5
			Collection(i)	<-------------	Map(i)
			  |10				 |K,V
		---------------------------	  ----------------
		|3			|7	  |		|
		List(i)			Set(i)	TreeMap		HashMap
		|duplicates		|unique
	-------------------	-------------------------
	|		|	|		|	
	ArrayList  LinkedList	TreeSet	     HashSet
	|		|	 |		  |hash table
	PhoneLog  PhoneContact	 ChemicalElements Book
	


		array = limitations of size
			FIXED TYPE
			FIXED SIZE
			CANNOT GROW
			CANNOT SHRINK

		ArrayList		












package = java.io

	stadard input				standard output				standard output 
	device					device								device
	|					|										|
	System.in				System.out							System.out
	|					   |								|
	|					   |									|
	|		Your Java Program	   |   				|
	|			|		   |					|
	+-->->input-->-->-->data + functions -->->output->->+
				 ||
				 ||
			incoming || outgoing
			---------------------
			|	|	|
			HDD	RAM	NETWORK
			|
			FILE
						
						
			input - read
			output - write
			
						
java.io - all methods throws IOException
						
==============================================================================												
	BYTE BASED STREAM		||	CHARACTER BASED STREAM
		|			||	|				
		ASCII			||	UNICODE
		1 byte = 256		||	1 char = 2 bytes = 65535
=================================================================================	
InputStream     | OutputStream	    	|| 	  Reader         |  Writer
  read();       |   write();		||		read();	 |   write();
-----------------------------------------------------------------------------
FileInputStream | FileOutputStream  	||  FileReader		 | FileWriter
-----------------------------------------------------------------------------				
						
						
			AMIT							AMIT
			1111							2222
				
						
			65
			
	BYTE BASED		- ASCII
		<--65-->   <--77---> <---73 -->	<---84-->
		0100 0001  0100 1101  0100 1001 0101 0100  
		A		   M          I	        T
			
	CHARACTER BASED		
		<-------------65-->   <-----------77--->  <-----------73 ---> <--------84------->
		0000 0000 0100 0001  0000 0000 0100 1101  0000 0000 0100 1001 0000 0000 0101 0100  
		A		             M                    I	                  T

						
	A 65
	B 66
	C 67
	D 68
	E 69
	F 70
	G 71
	H 72
	I 73
	J 74
	K 75
	L 76
	M 77
	N 78
	O 79
	P 80
	Q 81
	R 82
	S 83
	T 84
			

-----------------------------------------------------------

HSQLDB - DATABASE - WRITTEN IN JAVA

HYPER SQLDB


java.sql package 

		Java DataBase Connectivity


	FrontEnd			BackEnd
	|				|
	Java	--------> Driver <--- Database [ oracle/hsqldb ]
	|		    |		|
	Application logic   |		Data logic
			    |
			    |		Tables/procedures/functions
			    |
  hsqldb.jar -->	org.hsqldb.jdbc.JDBCDriver

		1. Know the database [ hsqldb ]
		2. Know the driver

			org.hsqldb.jdbc.JDBCDriver			
		3. Register this driver
			DriverManager.registerDriver(new org.hsqldb.jdbc.JDBCDriver())
		4. Connect to the database
			Connection conn = DriverManager.getConnection(dsn,username,password);
						    jdbc:hsqldb:hsql://localhost/xdb
		5. Make the desired Statement
			Statement st = conn.createStatement();
		6. Execute the Statement AND Acquire the Result
			ResultSet rs = st.executeQuery("SELECT * FROM DEPT");
		7. Process the result
		8. close the result, close the statement,
			close the connection
	


following diagram is NOT of inheritance

ORALCE DRIVER
C:\app\PC-26\product\18.0.0\dbhomeXE\jdbc\lib\ojdbc8.jar
					oracle.jdbc.OracleDriver

this is not inheritance diagram

			Driver
			| org.hsqldb.jdbc.JDBCDriver
			|
		 DriverManager
			| DriverManager.registerDriver(.)
			| DriverManager.getConnection(...)
			|
			Connection
			| conn.createStatement();
			| conn.prepareStatement();
			| conn.prepareCall();
			|
	-----------------------------------------------
	|		|			|	
	Statement	PreparedStatement	CallableStatement
	SELECT		INSERT/UPDATE/DELETE	Procedure/function




create table dept
(
   deptno int primary key,
   dname varchar(20),
   loc varchar(20)
);
INSERT INTO DEPT VALUES ( 10, 'IT','Mumbai' );
INSERT INTO DEPT VALUES ( 20, 'SALES','New York' );
INSERT INTO DEPT VALUES ( 30, 'PURCHASE','Delhi' );
INSERT INTO DEPT VALUES ( 40, 'QMS','Pune' );



	UpdateTest  AND 	DeleteTest
	|
	if non existing deptno is given
	then it must throw an exception as
		DepartmentNotFoundException


		
	DaoProject - self study  it

	then make your own DaoProject for
	Team1 : ApplicantDao
	Team2 : AccountDashBoardDao
	Team3 : FundTransferDao
	Team4 : PayeeDao
	Team5 : StaementDao


	

1 - DB
2 - POJO - plain old java object
3 - DAO - data access object
-----------------------------------------
4 - SERVICE - real business logic
5 - CONTROLLER
6 - UI
						1 - DB
						2 - POJO
						3 - DAO

					Menu-6


			
		|	|	|		|
		SERVICE COUNTER	4		CONTROLLER-5
						|
						CUSTOMER
				





	POJO		POJI		POJIIMPL
	|		|		|
	Department	DepartmentDAO	DepartmentDAOImpl









